{"version":3,"file":"758.demos.bundle.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-glyph-plugin/./node_modules/phaser/plugins/camera3d/src/sprite3d/Sprite3D.js","webpack://@agogpixel/phaser3-glyph-plugin/./node_modules/phaser/plugins/camera3d/src/sprite3d/Sprite3DCreator.js","webpack://@agogpixel/phaser3-glyph-plugin/./node_modules/phaser/src/gameobjects/BuildGameObject.js","webpack://@agogpixel/phaser3-glyph-plugin/./node_modules/phaser/src/gameobjects/BuildGameObjectAnimation.js"],"sourcesContent":["/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar Class = require('../../../../src/utils/Class');\nvar GameObject = require('../../../../src/gameobjects/GameObject');\nvar Sprite = require('../../../../src/gameobjects/sprite/Sprite');\nvar Vector2 = require('../../../../src/math/Vector2');\nvar Vector4 = require('../../../../src/math/Vector4');\n\n/**\n * @classdesc\n * A Sprite 3D Game Object.\n *\n * The Sprite 3D object is an encapsulation of a standard Sprite object, with additional methods to allow\n * it to be rendered by a 3D Camera. The Sprite can be positioned anywhere within 3D space.\n *\n * @class Sprite3D\n * @extends Phaser.GameObjects.Sprite\n * @memberOf Phaser.GameObjects\n * @constructor\n * @since 3.0.0\n *\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n * @param {number} x - The x position of this Game Object.\n * @param {number} y - The y position of this Game Object.\n * @param {number} z - The z position of this Game Object.\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\n */\nvar Sprite3D = new Class({\n\n    Extends: GameObject,\n\n    initialize:\n\n    function Sprite3D (scene, x, y, z, texture, frame)\n    {\n        GameObject.call(this, scene, 'Sprite3D');\n\n        /**\n         * The encapsulated Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#gameObject\n         * @type {Phaser.GameObjects.GameObject}\n         * @since 3.0.0\n         */\n        this.gameObject = new Sprite(scene, 0, 0, texture, frame);\n\n        /**\n         * The position of the Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#position\n         * @type {Phaser.Math.Vector4}\n         * @since 3.0.0\n         */\n        this.position = new Vector4(x, y, z);\n\n        /**\n         * The 2D size of the Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#size\n         * @type {Phaser.Math.Vector2}\n         * @since 3.0.0\n         */\n        this.size = new Vector2(this.gameObject.width, this.gameObject.height);\n\n        /**\n         * The 2D scale of the Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#scale\n         * @type {Phaser.Math.Vector2}\n         * @since 3.0.0\n         */\n        this.scale = new Vector2(1, 1);\n\n        /**\n         * Whether to automatically set the horizontal scale of the encapsulated Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#adjustScaleX\n         * @type {boolean}\n         * @default true\n         * @since 3.0.0\n         */\n        this.adjustScaleX = true;\n\n        /**\n         * Whether to automatically set the vertical scale of the encapsulated Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#adjustScaleY\n         * @type {boolean}\n         * @default true\n         * @since 3.0.0\n         */\n        this.adjustScaleY = true;\n\n        /**\n         * The visible state of the Game Object.\n         *\n         * @name Phaser.GameObjects.Sprite3D#_visible\n         * @type {boolean}\n         * @default true\n         * @private\n         * @since 3.0.0\n         */\n        this._visible = true;\n    },\n\n    /**\n     * Project this Sprite onto the given 3D Camera.\n     *\n     * @method Phaser.GameObjects.Sprite3D#project\n     * @since 3.0.0\n     *\n     * @param {Phaser.Cameras.Sprite3D.Camera} camera - The 3D Camera onto which to project this Sprite.\n     */\n    project: function (camera)\n    {\n        var pos = this.position;\n\n        var gameObject = this.gameObject;\n\n        camera.project(pos, gameObject);\n\n        camera.getPointSize(pos, this.size, this.scale);\n\n        if (this.scale.x <= 0 || this.scale.y <= 0)\n        {\n            gameObject.setVisible(false);\n        }\n        else\n        {\n            if (!gameObject.visible)\n            {\n                gameObject.setVisible(true);\n            }\n\n            if (this.adjustScaleX)\n            {\n                gameObject.scaleX = this.scale.x;\n            }\n\n            if (this.adjustScaleY)\n            {\n                gameObject.scaleY = this.scale.y;\n            }\n\n            gameObject.setDepth(gameObject.z * -1);\n        }\n    },\n\n    /**\n     * Set the visible state of the Game Object.\n     *\n     * @method Phaser.GameObjects.Sprite3D#setVisible\n     * @since 3.0.0\n     *\n     * @param {boolean} value - The visible state of the Game Object.\n     *\n     * @return {Phaser.GameObjects.Sprite3D} This Sprite3D Object.\n     */\n    setVisible: function (value)\n    {\n        this.visible = value;\n\n        return this;\n    },\n\n    /**\n     * The visible state of the Game Object.\n     *\n     * An invisible Game Object will skip rendering, but will still process update logic.\n     *\n     * @name Phaser.GameObjects.Sprite3D#visible\n     * @type {boolean}\n     * @since 3.0.0\n     */\n    visible: {\n\n        get: function ()\n        {\n            return this._visible;\n        },\n\n        set: function (value)\n        {\n            this._visible = value;\n            this.gameObject.visible = value;\n        }\n\n    },\n\n    /**\n     * The x position of this Game Object.\n     *\n     * @name Phaser.GameObjects.Sprite3D#x\n     * @type {number}\n     * @since 3.0.0\n     */\n    x: {\n\n        get: function ()\n        {\n            return this.position.x;\n        },\n\n        set: function (value)\n        {\n            this.position.x = value;\n        }\n\n    },\n\n    /**\n     * The y position of this Game Object.\n     *\n     * @name Phaser.GameObjects.Sprite3D#y\n     * @type {number}\n     * @since 3.0.0\n     */\n    y: {\n\n        get: function ()\n        {\n            return this.position.y;\n        },\n\n        set: function (value)\n        {\n            this.position.y = value;\n        }\n\n    },\n\n    /**\n     * The z position of this Game Object.\n     *\n     * @name Phaser.GameObjects.Sprite3D#z\n     * @type {number}\n     * @since 3.0.0\n     */\n    z: {\n\n        get: function ()\n        {\n            return this.position.z;\n        },\n\n        set: function (value)\n        {\n            this.position.z = value;\n        }\n\n    }\n\n});\n\nmodule.exports = Sprite3D;\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar BuildGameObject = require('../../../../src/gameobjects/BuildGameObject');\r\nvar BuildGameObjectAnimation = require('../../../../src/gameobjects/BuildGameObjectAnimation');\r\nvar GameObjectCreator = require('../../../../src/gameobjects/GameObjectCreator');\r\nvar GetAdvancedValue = require('../../../../src/utils/object/GetAdvancedValue');\r\nvar Sprite3D = require('./Sprite3D');\r\n\r\n/**\r\n * Creates a new Sprite3D Game Object and returns it.\r\n *\r\n * Note: This method will only be available if the Sprite3D Game Object has been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectCreator#sprite3D\r\n * @since 3.0.0\r\n *\r\n * @param {object} config - The configuration object this Game Object will use to create itself.\r\n * @param {boolean} [addToScene] - Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.\r\n *\r\n * @return {Phaser.GameObjects.Sprite3D} The Game Object that was created.\r\n */\r\nGameObjectCreator.register('sprite3D', function (config, addToScene)\r\n{\r\n    if (config === undefined) { config = {}; }\r\n\r\n    var key = GetAdvancedValue(config, 'key', null);\r\n    var frame = GetAdvancedValue(config, 'frame', null);\r\n\r\n    var sprite = new Sprite3D(this.scene, 0, 0, key, frame);\r\n\r\n    if (addToScene !== undefined)\r\n    {\r\n        config.add = addToScene;\r\n    }\r\n\r\n    BuildGameObject(this.scene, sprite, config);\r\n\r\n    //  Sprite specific config options:\r\n\r\n    BuildGameObjectAnimation(sprite, config);\r\n\r\n    return sprite;\r\n});\r\n\r\n//  When registering a factory function 'this' refers to the GameObjectCreator context.\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BlendModes = require('../renderer/BlendModes');\r\nvar GetAdvancedValue = require('../utils/object/GetAdvancedValue');\r\n\r\n/**\r\n * Builds a Game Object using the provided configuration object.\r\n *\r\n * @function Phaser.GameObjects.BuildGameObject\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - A reference to the Scene.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The initial GameObject.\r\n * @param {Phaser.Types.GameObjects.GameObjectConfig} config - The config to build the GameObject with.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The built Game Object.\r\n */\r\nvar BuildGameObject = function (scene, gameObject, config)\r\n{\r\n    //  Position\r\n\r\n    gameObject.x = GetAdvancedValue(config, 'x', 0);\r\n    gameObject.y = GetAdvancedValue(config, 'y', 0);\r\n    gameObject.depth = GetAdvancedValue(config, 'depth', 0);\r\n\r\n    //  Flip\r\n\r\n    gameObject.flipX = GetAdvancedValue(config, 'flipX', false);\r\n    gameObject.flipY = GetAdvancedValue(config, 'flipY', false);\r\n\r\n    //  Scale\r\n    //  Either: { scale: 2 } or { scale: { x: 2, y: 2 }}\r\n\r\n    var scale = GetAdvancedValue(config, 'scale', null);\r\n\r\n    if (typeof scale === 'number')\r\n    {\r\n        gameObject.setScale(scale);\r\n    }\r\n    else if (scale !== null)\r\n    {\r\n        gameObject.scaleX = GetAdvancedValue(scale, 'x', 1);\r\n        gameObject.scaleY = GetAdvancedValue(scale, 'y', 1);\r\n    }\r\n\r\n    //  ScrollFactor\r\n    //  Either: { scrollFactor: 2 } or { scrollFactor: { x: 2, y: 2 }}\r\n\r\n    var scrollFactor = GetAdvancedValue(config, 'scrollFactor', null);\r\n\r\n    if (typeof scrollFactor === 'number')\r\n    {\r\n        gameObject.setScrollFactor(scrollFactor);\r\n    }\r\n    else if (scrollFactor !== null)\r\n    {\r\n        gameObject.scrollFactorX = GetAdvancedValue(scrollFactor, 'x', 1);\r\n        gameObject.scrollFactorY = GetAdvancedValue(scrollFactor, 'y', 1);\r\n    }\r\n\r\n    //  Rotation\r\n\r\n    gameObject.rotation = GetAdvancedValue(config, 'rotation', 0);\r\n\r\n    var angle = GetAdvancedValue(config, 'angle', null);\r\n\r\n    if (angle !== null)\r\n    {\r\n        gameObject.angle = angle;\r\n    }\r\n\r\n    //  Alpha\r\n\r\n    gameObject.alpha = GetAdvancedValue(config, 'alpha', 1);\r\n\r\n    //  Origin\r\n    //  Either: { origin: 0.5 } or { origin: { x: 0.5, y: 0.5 }}\r\n\r\n    var origin = GetAdvancedValue(config, 'origin', null);\r\n\r\n    if (typeof origin === 'number')\r\n    {\r\n        gameObject.setOrigin(origin);\r\n    }\r\n    else if (origin !== null)\r\n    {\r\n        var ox = GetAdvancedValue(origin, 'x', 0.5);\r\n        var oy = GetAdvancedValue(origin, 'y', 0.5);\r\n\r\n        gameObject.setOrigin(ox, oy);\r\n    }\r\n\r\n    //  BlendMode\r\n\r\n    gameObject.blendMode = GetAdvancedValue(config, 'blendMode', BlendModes.NORMAL);\r\n\r\n    //  Visible\r\n\r\n    gameObject.visible = GetAdvancedValue(config, 'visible', true);\r\n\r\n    //  Add to Scene\r\n\r\n    var add = GetAdvancedValue(config, 'add', true);\r\n\r\n    if (add)\r\n    {\r\n        scene.sys.displayList.add(gameObject);\r\n    }\r\n\r\n    if (gameObject.preUpdate)\r\n    {\r\n        scene.sys.updateList.add(gameObject);\r\n    }\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = BuildGameObject;\r\n","/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar GetAdvancedValue = require('../utils/object/GetAdvancedValue');\n\n/**\n * Adds an Animation component to a Sprite and populates it based on the given config.\n *\n * @function Phaser.GameObjects.BuildGameObjectAnimation\n * @since 3.0.0\n *\n * @param {Phaser.GameObjects.Sprite} sprite - The sprite to add an Animation component to.\n * @param {object} config - The animation config.\n *\n * @return {Phaser.GameObjects.Sprite} The updated Sprite.\n */\nvar BuildGameObjectAnimation = function (sprite, config)\n{\n    var animConfig = GetAdvancedValue(config, 'anims', null);\n\n    if (animConfig === null)\n    {\n        return sprite;\n    }\n\n    if (typeof animConfig === 'string')\n    {\n        //  { anims: 'key' }\n        sprite.anims.play(animConfig);\n    }\n    else if (typeof animConfig === 'object')\n    {\n        //  { anims: {\n        //              key: string\n        //              startFrame: [string|number]\n        //              delay: [float]\n        //              repeat: [integer]\n        //              repeatDelay: [float]\n        //              yoyo: [boolean]\n        //              play: [boolean]\n        //              delayedPlay: [boolean]\n        //           }\n        //  }\n\n        var anims = sprite.anims;\n\n        var key = GetAdvancedValue(animConfig, 'key', undefined);\n\n        if (key)\n        {\n            var startFrame = GetAdvancedValue(animConfig, 'startFrame', undefined);\n\n            var delay = GetAdvancedValue(animConfig, 'delay', 0);\n            var repeat = GetAdvancedValue(animConfig, 'repeat', 0);\n            var repeatDelay = GetAdvancedValue(animConfig, 'repeatDelay', 0);\n            var yoyo = GetAdvancedValue(animConfig, 'yoyo', false);\n\n            var play = GetAdvancedValue(animConfig, 'play', false);\n            var delayedPlay = GetAdvancedValue(animConfig, 'delayedPlay', 0);\n\n            var playConfig = {\n                key: key,\n                delay: delay,\n                repeat: repeat,\n                repeatDelay: repeatDelay,\n                yoyo: yoyo,\n                startFrame: startFrame\n            };\n\n            if (play)\n            {\n                anims.play(playConfig);\n            }\n            else if (delayedPlay > 0)\n            {\n                anims.playAfterDelay(playConfig, delayedPlay);\n            }\n            else\n            {\n                anims.load(playConfig);\n            }\n        }\n    }\n\n    return sprite;\n};\n\nmodule.exports = BuildGameObjectAnimation;\n"],"names":["Class","GameObject","Sprite","Vector2","Vector4","Sprite3D","Extends","initialize","scene","x","y","z","texture","frame","call","this","gameObject","position","size","width","height","scale","adjustScaleX","adjustScaleY","_visible","project","camera","pos","getPointSize","setVisible","visible","scaleX","scaleY","setDepth","value","get","set","module","exports","BuildGameObject","BuildGameObjectAnimation","GameObjectCreator","GetAdvancedValue","register","config","addToScene","undefined","key","sprite","add","BlendModes","depth","flipX","flipY","setScale","scrollFactor","setScrollFactor","scrollFactorX","scrollFactorY","rotation","angle","alpha","origin","setOrigin","ox","oy","blendMode","NORMAL","sys","displayList","preUpdate","updateList","animConfig","anims","play","startFrame","delay","repeat","repeatDelay","yoyo","delayedPlay","playConfig","playAfterDelay","load"],"sourceRoot":""}