{"version":3,"file":"69.demos.bundle.js","mappings":";wIAMA,IAAIA,EAAQ,EAAQ,OAChBC,EAAa,EAAQ,OACrBC,EAAS,EAAQ,OACjBC,EAAU,EAAQ,OAClBC,EAAU,EAAQ,OAsBlBC,EAAW,IAAIL,EAAM,CAErBM,QAASL,EAETM,WAEA,SAAmBC,EAAOC,EAAGC,EAAGC,EAAGC,EAASC,GAExCZ,EAAWa,KAAKC,KAAMP,EAAO,YAS7BO,KAAKC,WAAa,IAAId,EAAOM,EAAO,EAAG,EAAGI,EAASC,GASnDE,KAAKE,SAAW,IAAIb,EAAQK,EAAGC,EAAGC,GASlCI,KAAKG,KAAO,IAAIf,EAAQY,KAAKC,WAAWG,MAAOJ,KAAKC,WAAWI,QAS/DL,KAAKM,MAAQ,IAAIlB,EAAQ,EAAG,GAU5BY,KAAKO,cAAe,EAUpBP,KAAKQ,cAAe,EAWpBR,KAAKS,UAAW,GAWpBC,QAAS,SAAUC,GAEf,IAAIC,EAAMZ,KAAKE,SAEXD,EAAaD,KAAKC,WAEtBU,EAAOD,QAAQE,EAAKX,GAEpBU,EAAOE,aAAaD,EAAKZ,KAAKG,KAAMH,KAAKM,OAErCN,KAAKM,MAAMZ,GAAK,GAAKM,KAAKM,MAAMX,GAAK,EAErCM,EAAWa,YAAW,IAIjBb,EAAWc,SAEZd,EAAWa,YAAW,GAGtBd,KAAKO,eAELN,EAAWe,OAAShB,KAAKM,MAAMZ,GAG/BM,KAAKQ,eAELP,EAAWgB,OAASjB,KAAKM,MAAMX,GAGnCM,EAAWiB,UAAyB,EAAhBjB,EAAWL,KAcvCkB,WAAY,SAAUK,GAIlB,OAFAnB,KAAKe,QAAUI,EAERnB,MAYXe,QAAS,CAELK,IAAK,WAED,OAAOpB,KAAKS,UAGhBY,IAAK,SAAUF,GAEXnB,KAAKS,SAAWU,EAChBnB,KAAKC,WAAWc,QAAUI,IAYlCzB,EAAG,CAEC0B,IAAK,WAED,OAAOpB,KAAKE,SAASR,GAGzB2B,IAAK,SAAUF,GAEXnB,KAAKE,SAASR,EAAIyB,IAY1BxB,EAAG,CAECyB,IAAK,WAED,OAAOpB,KAAKE,SAASP,GAGzB0B,IAAK,SAAUF,GAEXnB,KAAKE,SAASP,EAAIwB,IAY1BvB,EAAG,CAECwB,IAAK,WAED,OAAOpB,KAAKE,SAASN,GAGzByB,IAAK,SAAUF,GAEXnB,KAAKE,SAASN,EAAIuB,MAO9BG,EAAOC,QAAUjC,kBC7PjB,IAAIA,EAAW,EAAQ,OACC,EAAQ,OAkBdkC,SAAS,YAAY,SAAU9B,EAAGC,EAAGC,EAAG6B,EAAK3B,GAE3D,IAAI4B,EAAS,IAAIpC,EAASU,KAAKP,MAAOC,EAAGC,EAAGC,EAAG6B,EAAK3B,GAKpD,OAHAE,KAAK2B,YAAYC,IAAIF,EAAOzB,YAC5BD,KAAK6B,WAAWD,IAAIF,EAAOzB,YAEpByB","sources":["webpack://@agogpixel/phaser3-glyph-plugin/./node_modules/phaser/plugins/camera3d/src/sprite3d/Sprite3D.js","webpack://@agogpixel/phaser3-glyph-plugin/./node_modules/phaser/plugins/camera3d/src/sprite3d/Sprite3DFactory.js"],"sourcesContent":["/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar Class = require('../../../../src/utils/Class');\nvar GameObject = require('../../../../src/gameobjects/GameObject');\nvar Sprite = require('../../../../src/gameobjects/sprite/Sprite');\nvar Vector2 = require('../../../../src/math/Vector2');\nvar Vector4 = require('../../../../src/math/Vector4');\n\n/**\n * @classdesc\n * A Sprite 3D Game Object.\n *\n * The Sprite 3D object is an encapsulation of a standard Sprite object, with additional methods to allow\n * it to be rendered by a 3D Camera. The Sprite can be positioned anywhere within 3D space.\n *\n * @class Sprite3D\n * @extends Phaser.GameObjects.Sprite\n * @memberOf Phaser.GameObjects\n * @constructor\n * @since 3.0.0\n *\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n * @param {number} x - The x position of this Game Object.\n * @param {number} y - The y position of this Game Object.\n * @param {number} z - The z position of this Game Object.\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\n */\nvar Sprite3D = new Class({\n\n    Extends: GameObject,\n\n    initialize:\n\n    function Sprite3D (scene, x, y, z, texture, frame)\n    {\n        GameObject.call(this, scene, 'Sprite3D');\n\n        /**\n         * The encapsulated Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#gameObject\n         * @type {Phaser.GameObjects.GameObject}\n         * @since 3.0.0\n         */\n        this.gameObject = new Sprite(scene, 0, 0, texture, frame);\n\n        /**\n         * The position of the Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#position\n         * @type {Phaser.Math.Vector4}\n         * @since 3.0.0\n         */\n        this.position = new Vector4(x, y, z);\n\n        /**\n         * The 2D size of the Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#size\n         * @type {Phaser.Math.Vector2}\n         * @since 3.0.0\n         */\n        this.size = new Vector2(this.gameObject.width, this.gameObject.height);\n\n        /**\n         * The 2D scale of the Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#scale\n         * @type {Phaser.Math.Vector2}\n         * @since 3.0.0\n         */\n        this.scale = new Vector2(1, 1);\n\n        /**\n         * Whether to automatically set the horizontal scale of the encapsulated Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#adjustScaleX\n         * @type {boolean}\n         * @default true\n         * @since 3.0.0\n         */\n        this.adjustScaleX = true;\n\n        /**\n         * Whether to automatically set the vertical scale of the encapsulated Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#adjustScaleY\n         * @type {boolean}\n         * @default true\n         * @since 3.0.0\n         */\n        this.adjustScaleY = true;\n\n        /**\n         * The visible state of the Game Object.\n         *\n         * @name Phaser.GameObjects.Sprite3D#_visible\n         * @type {boolean}\n         * @default true\n         * @private\n         * @since 3.0.0\n         */\n        this._visible = true;\n    },\n\n    /**\n     * Project this Sprite onto the given 3D Camera.\n     *\n     * @method Phaser.GameObjects.Sprite3D#project\n     * @since 3.0.0\n     *\n     * @param {Phaser.Cameras.Sprite3D.Camera} camera - The 3D Camera onto which to project this Sprite.\n     */\n    project: function (camera)\n    {\n        var pos = this.position;\n\n        var gameObject = this.gameObject;\n\n        camera.project(pos, gameObject);\n\n        camera.getPointSize(pos, this.size, this.scale);\n\n        if (this.scale.x <= 0 || this.scale.y <= 0)\n        {\n            gameObject.setVisible(false);\n        }\n        else\n        {\n            if (!gameObject.visible)\n            {\n                gameObject.setVisible(true);\n            }\n\n            if (this.adjustScaleX)\n            {\n                gameObject.scaleX = this.scale.x;\n            }\n\n            if (this.adjustScaleY)\n            {\n                gameObject.scaleY = this.scale.y;\n            }\n\n            gameObject.setDepth(gameObject.z * -1);\n        }\n    },\n\n    /**\n     * Set the visible state of the Game Object.\n     *\n     * @method Phaser.GameObjects.Sprite3D#setVisible\n     * @since 3.0.0\n     *\n     * @param {boolean} value - The visible state of the Game Object.\n     *\n     * @return {Phaser.GameObjects.Sprite3D} This Sprite3D Object.\n     */\n    setVisible: function (value)\n    {\n        this.visible = value;\n\n        return this;\n    },\n\n    /**\n     * The visible state of the Game Object.\n     *\n     * An invisible Game Object will skip rendering, but will still process update logic.\n     *\n     * @name Phaser.GameObjects.Sprite3D#visible\n     * @type {boolean}\n     * @since 3.0.0\n     */\n    visible: {\n\n        get: function ()\n        {\n            return this._visible;\n        },\n\n        set: function (value)\n        {\n            this._visible = value;\n            this.gameObject.visible = value;\n        }\n\n    },\n\n    /**\n     * The x position of this Game Object.\n     *\n     * @name Phaser.GameObjects.Sprite3D#x\n     * @type {number}\n     * @since 3.0.0\n     */\n    x: {\n\n        get: function ()\n        {\n            return this.position.x;\n        },\n\n        set: function (value)\n        {\n            this.position.x = value;\n        }\n\n    },\n\n    /**\n     * The y position of this Game Object.\n     *\n     * @name Phaser.GameObjects.Sprite3D#y\n     * @type {number}\n     * @since 3.0.0\n     */\n    y: {\n\n        get: function ()\n        {\n            return this.position.y;\n        },\n\n        set: function (value)\n        {\n            this.position.y = value;\n        }\n\n    },\n\n    /**\n     * The z position of this Game Object.\n     *\n     * @name Phaser.GameObjects.Sprite3D#z\n     * @type {number}\n     * @since 3.0.0\n     */\n    z: {\n\n        get: function ()\n        {\n            return this.position.z;\n        },\n\n        set: function (value)\n        {\n            this.position.z = value;\n        }\n\n    }\n\n});\n\nmodule.exports = Sprite3D;\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Sprite3D = require('./Sprite3D');\r\nvar GameObjectFactory = require('../../../../src/gameobjects/GameObjectFactory');\r\n\r\n/**\r\n * Creates a new Sprite3D Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the Sprite3D Game Object has been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#sprite3D\r\n * @since 3.0.0\r\n *\r\n * @param {number} x - The horizontal position of this Game Object.\r\n * @param {number} y - The vertical position of this Game Object.\r\n * @param {number} z - The z position of this Game Object.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n *\r\n * @return {Phaser.GameObjects.Sprite3D} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('sprite3D', function (x, y, z, key, frame)\r\n{\r\n    var sprite = new Sprite3D(this.scene, x, y, z, key, frame);\r\n\r\n    this.displayList.add(sprite.gameObject);\r\n    this.updateList.add(sprite.gameObject);\r\n\r\n    return sprite;\r\n});\r\n\r\n//  When registering a factory function 'this' refers to the GameObjectFactory context.\r\n//\r\n//  There are several properties available to use:\r\n//\r\n//  this.scene - a reference to the Scene that owns the GameObjectFactory\r\n//  this.displayList - a reference to the Display List the Scene owns\r\n//  this.updateList - a reference to the Update List the Scene owns\r\n"],"names":["Class","GameObject","Sprite","Vector2","Vector4","Sprite3D","Extends","initialize","scene","x","y","z","texture","frame","call","this","gameObject","position","size","width","height","scale","adjustScaleX","adjustScaleY","_visible","project","camera","pos","getPointSize","setVisible","visible","scaleX","scaleY","setDepth","value","get","set","module","exports","register","key","sprite","displayList","add","updateList"],"sourceRoot":""}