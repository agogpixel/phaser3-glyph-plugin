{"version":3,"file":"550.demos.bundle.js","mappings":"yMAEA,SAAe,SAA0BA,IAAW,iDAClD,MAAMC,QAAY,wCAIZC,EAAqC,UAF5B,UAEiBC,OAEhC,MAAMC,UAAcH,EAAII,YAAYC,WAAW,QAAS,cAAcC,OAAOH,UAC3EI,SACE,MAAMC,EAAO,IAAIR,EAAIS,KAAK,GAAI,8BAA+B,UAEvDC,EAAWC,KAAKC,IAAIF,SAAS,EAAG,EAAG,GAAI,GAAIF,EAAMP,GAEvD,IAAK,IAAIY,EAAI,EAAGA,EAAIH,EAASI,gBAAiBD,EAC5C,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAASM,eAAgBD,EACtCF,GAAME,GAAKF,IAAMH,EAASI,cAAgB,GAAKC,IAAML,EAASM,aAAe,EAGhFN,EAASO,KAAKF,EAAGF,EAAG,CAAC,CAAC,IAAK,UAF3BH,EAASO,KAAKF,EAAGF,EAAG,CAAC,CAAC,IAAK,YAAa,WAO9CF,KAAKO,QAAQC,KAAKC,SAASV,EAASW,YAAYN,EAAGL,EAASW,YAAYR,GAExE,MAAMS,EAAMX,KAAKC,IACdW,MAAM,EAAG,EAAG,CAAC,IAAK,OAAQ,SAAUf,EAAMP,GAC1CuB,eAAed,EAASe,cAAc,EAAG,EAAG,GAAK,KAE9CC,EAAUf,KAAKgB,OAAOf,IAAI,CAC9BgB,QAASN,EACTO,OAAQ,CAAEC,MAAO,IAAKC,SAAU,IAAMC,KAAM,SAAUC,MAAM,EAAMC,QAAS,GAC3EC,OAAQ,CAAEL,MAAO,IAAKC,SAAU,IAAMC,KAAM,SAAUC,MAAM,EAAMC,QAAS,KAGvEE,EAAI,CAAC,EAAG,GAEdzB,KAAK0B,KAAKC,SAAS,CACjBC,MAAM,EACNC,MAAO,IACPC,SAAU,KACRf,EAAQgB,QAER,IAAIC,GAAS,EAEb,EAAG,CACD,MAAMC,EAAKtC,OAAOuC,KAAKC,IAAIC,gBAAgB,EAAG,GACxCC,EAAK1C,OAAOuC,KAAKC,IAAIC,gBAAgB,EAAG,GAE9C,GAAW,IAAPH,GAAmB,IAAPI,EACd,SAGF,MAAMjC,EAAIqB,EAAE,GAAKQ,EAEjB,GAAU,IAAN7B,GAAWA,IAAML,EAASM,aAAe,EAC3C,SAGF,MAAMH,EAAIuB,EAAE,GAAKY,EAEjB,GAAU,IAANnC,GAAWA,IAAMH,EAASI,cAAgB,EAC5C,SAGF6B,GAAS,EACTP,EAAE,GAAKrB,EACPqB,EAAE,GAAKvB,EAEP,MAAMoC,EAAQtC,KAAKgB,OAAOf,IAAI,CAC5BgB,QAASN,EACTP,EAAG,CACDe,MAAOpB,EAASwC,aAAanC,EAAG,IAChCgB,SAAU,IACVC,KAAM,UAERnB,EAAG,CACDiB,MAAOpB,EAASyC,aAAatC,EAAG,IAChCkB,SAAU,IACVC,KAAM,UAERoB,MAAO,CACLtB,MAAY,EAALc,EACPb,SAAU,IACVC,KAAM,SACNC,MAAM,GAERoB,WAAY,KACV3B,EAAQ4B,SACRL,EAAMM,mBAGFZ,IAEZa,cAAe7C,QAKpBZ,EAAO0D,MAAyBC,KAAKvD,GAEtC,IAAIG,OAAOqD,KAAK5D","sources":["webpack://@agogpixel/phaser3-glyph-plugin/./demos/glyph-2/index.ts"],"sourcesContent":["import { demoHandlerFactory, getParams } from '../shared';\n\nexport default demoHandlerFactory(async (config) => {\n  const api = await import(/* webpackChunkName: \"phaser-glyph-plugin\" */ '../../src');\n\n  const params = getParams();\n\n  const forceSquareRatio = params.square === 'true' ? true : false;\n\n  class Scene extends api.GlyphPlugin.GlyphScene('glyph', class extends Phaser.Scene {}) {\n    create() {\n      const font = new api.Font(36, 'DejaVu Sans Mono, monospace', 'bolder');\n\n      const glyphmap = this.add.glyphmap(0, 0, 10, 10, font, forceSquareRatio);\n\n      for (let y = 0; y < glyphmap.heightInCells; ++y) {\n        for (let x = 0; x < glyphmap.widthInCells; ++x) {\n          if (!y || !x || y === glyphmap.heightInCells - 1 || x === glyphmap.widthInCells - 1) {\n            glyphmap.draw(x, y, [['#', '#EEEEEEFE', '#4444']]);\n          } else {\n            glyphmap.draw(x, y, [['.', '#FFF']]);\n          }\n        }\n      }\n\n      this.cameras.main.centerOn(glyphmap.getCenter().x, glyphmap.getCenter().y);\n\n      const npc = this.add\n        .glyph(0, 0, ['@', '#fff', '#0007'], font, forceSquareRatio)\n        .setPosition(...glyphmap.cellToWorldXY(4, 4, 0.5, 0.5));\n\n      const npcIdle = this.tweens.add({\n        targets: npc,\n        scaleX: { value: 1.2, duration: 1000, ease: 'Linear', yoyo: true, repeat: -1 },\n        scaleY: { value: 1.1, duration: 1000, ease: 'Linear', yoyo: true, repeat: -1 }\n      });\n\n      const p = [4, 4] as [number, number];\n\n      this.time.addEvent({\n        loop: true,\n        delay: 3000,\n        callback: () => {\n          npcIdle.pause();\n\n          let moveOk = false;\n\n          do {\n            const dx = Phaser.Math.RND.integerInRange(-1, 1);\n            const dy = Phaser.Math.RND.integerInRange(-1, 1);\n\n            if (dx === 0 && dy === 0) {\n              continue;\n            }\n\n            const x = p[0] + dx;\n\n            if (x === 0 || x === glyphmap.widthInCells - 1) {\n              continue;\n            }\n\n            const y = p[1] + dy;\n\n            if (y === 0 || y === glyphmap.heightInCells - 1) {\n              continue;\n            }\n\n            moveOk = true;\n            p[0] = x;\n            p[1] = y;\n\n            const tween = this.tweens.add({\n              targets: npc,\n              x: {\n                value: glyphmap.cellToWorldX(x, 0.5),\n                duration: 1000,\n                ease: 'Linear'\n              },\n              y: {\n                value: glyphmap.cellToWorldY(y, 0.5),\n                duration: 1000,\n                ease: 'Linear'\n              },\n              angle: {\n                value: dx * 8,\n                duration: 500,\n                ease: 'Power1',\n                yoyo: true\n              },\n              onComplete: () => {\n                npcIdle.resume();\n                tween.remove();\n              }\n            });\n          } while (!moveOk);\n        },\n        callbackScope: this\n      });\n    }\n  }\n\n  (config.scene as typeof Scene[]).push(Scene);\n\n  new Phaser.Game(config);\n});\n"],"names":["config","api","forceSquareRatio","square","Scene","GlyphPlugin","GlyphScene","Phaser","create","font","Font","glyphmap","this","add","y","heightInCells","x","widthInCells","draw","cameras","main","centerOn","getCenter","npc","glyph","setPosition","cellToWorldXY","npcIdle","tweens","targets","scaleX","value","duration","ease","yoyo","repeat","scaleY","p","time","addEvent","loop","delay","callback","pause","moveOk","dx","Math","RND","integerInRange","dy","tween","cellToWorldX","cellToWorldY","angle","onComplete","resume","remove","callbackScope","scene","push","Game"],"sourceRoot":""}