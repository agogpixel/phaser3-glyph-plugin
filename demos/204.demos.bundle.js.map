{"version":3,"file":"204.demos.bundle.js","mappings":"yMAGA,SAAe,SAA0BA,IAAW,iDAClD,MAAMC,QAAY,wCAIZC,EAAqC,UAF5B,UAEiBC,OAEhC,MAAMC,UAAcH,EAAII,YAAYC,WAAW,QAAS,cAAcC,OAAOH,UAK3EI,SACEC,KAAKC,IAAMD,KAAKE,IAAIC,SAAS,IAAK,KAAM,GAAI,QAAIC,EAAWX,GAE3DO,KAAKK,OAASL,KAAKE,IAAII,WACvBN,KAAKK,OAAOE,UAAU,EAAG,SAAU,GACnCP,KAAKK,OAAOG,WAAW,EAAG,EAAGR,KAAKC,IAAIQ,UAAYT,KAAKC,IAAIS,OAAQV,KAAKC,IAAIU,WAAaX,KAAKC,IAAIW,QAElG,IAAK,IAAIC,EAAI,EAAGA,EAAIb,KAAKC,IAAIa,gBAAiBD,EAC5C,IAAK,IAAIE,EAAI,EAAGA,EAAIf,KAAKC,IAAIe,eAAgBD,EACtCF,GAAME,GAAKF,IAAMb,KAAKC,IAAIa,cAAgB,GAAKC,IAAMf,KAAKC,IAAIe,aAAe,EAGhFhB,KAAKC,IAAIgB,KAAKF,EAAGF,EAAG,CAAC,CAAC,IAAK,UAF3Bb,KAAKC,IAAIgB,KAAKF,EAAGF,EAAG,CAAC,CAAC,IAAK,YAAa,WAO9Cb,KAAKkB,QAAQC,KAAKC,SAASpB,KAAKC,IAAIoB,YAAYN,EAAGf,KAAKC,IAAIoB,YAAYR,GAG1ES,SACE,MAAMC,EAAavB,KAAKwB,MAAMC,cAAcC,iBAAiB1B,KAAKkB,QAAQC,MAGpEQ,EAAe3B,KAAKC,IAAI2B,aAAaL,EAAWR,GAChDc,EAAe7B,KAAKC,IAAI6B,aAAaP,EAAWV,GAGtDb,KAAKK,OAAOU,EAAIf,KAAKC,IAAI8B,aAAaJ,GACtC3B,KAAKK,OAAOQ,EAAIb,KAAKC,IAAI+B,aAAaH,GAElC7B,KAAKwB,MAAMS,QAAQR,cAAcS,QACnClC,KAAKC,IAAIgB,KAAKU,EAAcE,EAAc,CACxC,CAAC/B,OAAOqC,KAAKC,IAAIC,eAAe,GAAI,KAAMvC,OAAOwC,QAAQC,MAAMC,YAAa1C,OAAOwC,QAAQC,MAAMC,gBAMxGjD,EAAOkD,MAAyBC,KAAK/C,GAEtC,IAAIG,OAAO6C,KAAKpD","sources":["webpack://@agogpixel/phaser3-glyph-plugin/./demos/glyphmap-2/index.ts"],"sourcesContent":["import { demoHandlerFactory, getParams } from '../shared';\nimport type { Glyphmap } from '../../src';\n\nexport default demoHandlerFactory(async (config) => {\n  const api = await import(/* webpackChunkName: \"phaser-glyph-plugin\" */ '../../src');\n\n  const params = getParams();\n\n  const forceSquareRatio = params.square === 'true' ? true : false;\n\n  class Scene extends api.GlyphPlugin.GlyphScene('glyph', class extends Phaser.Scene {}) {\n    map: Glyphmap;\n\n    marker: Phaser.GameObjects.Graphics;\n\n    create() {\n      this.map = this.add.glyphmap(333, 47.2, 25, 15, undefined, forceSquareRatio);\n\n      this.marker = this.add.graphics();\n      this.marker.lineStyle(2, 0xffff00, 1);\n      this.marker.strokeRect(0, 0, this.map.cellWidth * this.map.scaleX, this.map.cellHeight * this.map.scaleY);\n\n      for (let y = 0; y < this.map.heightInCells; ++y) {\n        for (let x = 0; x < this.map.widthInCells; ++x) {\n          if (!y || !x || y === this.map.heightInCells - 1 || x === this.map.widthInCells - 1) {\n            this.map.draw(x, y, [['#', '#EEEEEEFE', '#4444']]);\n          } else {\n            this.map.draw(x, y, [['.', '#FFF']]);\n          }\n        }\n      }\n\n      this.cameras.main.centerOn(this.map.getCenter().x, this.map.getCenter().y);\n    }\n\n    update() {\n      const worldPoint = this.input.activePointer.positionToCamera(this.cameras.main) as Phaser.Math.Vector2;\n\n      // Rounds down to nearest cell.\n      const pointerCellX = this.map.worldToCellX(worldPoint.x);\n      const pointerCellY = this.map.worldToCellY(worldPoint.y);\n\n      // Snap to cell coordinates, but in world space.\n      this.marker.x = this.map.cellToWorldX(pointerCellX);\n      this.marker.y = this.map.cellToWorldY(pointerCellY);\n\n      if (this.input.manager.activePointer.isDown) {\n        this.map.draw(pointerCellX, pointerCellY, [\n          [Phaser.Math.RND.integerInRange(20, 200), Phaser.Display.Color.RandomRGB(), Phaser.Display.Color.RandomRGB()]\n        ]);\n      }\n    }\n  }\n\n  (config.scene as typeof Scene[]).push(Scene);\n\n  new Phaser.Game(config);\n});\n"],"names":["config","api","forceSquareRatio","square","Scene","GlyphPlugin","GlyphScene","Phaser","create","this","map","add","glyphmap","undefined","marker","graphics","lineStyle","strokeRect","cellWidth","scaleX","cellHeight","scaleY","y","heightInCells","x","widthInCells","draw","cameras","main","centerOn","getCenter","update","worldPoint","input","activePointer","positionToCamera","pointerCellX","worldToCellX","pointerCellY","worldToCellY","cellToWorldX","cellToWorldY","manager","isDown","Math","RND","integerInRange","Display","Color","RandomRGB","scene","push","Game"],"sourceRoot":""}